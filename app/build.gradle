import groovy.json.JsonOutput

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.google.devtools.ksp")
}

def isRelease = false

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

//资源重定向
def listSubFile = {
    //新资源目录
    def resFolder = 'src/main/res/layouts'
    //新资源目录下的文件夹
    def files = file(resFolder).listFiles()
    def folders = []
    //遍历路径
    files.each {
        item -> folders.add(item.absolutePath)
    }
    //资源整合
    folders.add(file(resFolder).parentFile.absolutePath)
    return folders
}

android {
    compileSdk = 31

    defaultConfig {
        applicationId "com.yikwing.ykquickdev"
        minSdk = 24
        targetSdk = 31
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
            buildConfigField "String", "YK_CONFIG", "\"" + JsonOutput.toJson(rootProject.ext.injectEnv).replaceAll("\"", "\\\\\"") + "\""
        }
        release {
            // 启用代码压缩、优化及混淆
            minifyEnabled true
            // 启用资源压缩
            shrinkResources true
            signingConfig signingConfigs.config
            buildConfigField "String", "YK_CONFIG", "\"" + JsonOutput.toJson(rootProject.ext.injectEnv).replaceAll("\"", "\\\\\"") + "\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        ndk {
            abiFilters 'arm64-v8a'
        }
    }

    lintOptions {
        checkDependencies true
    }

    sourceSets {
        main {
            res.srcDirs = listSubFile()
        }
    }
}

dependencies {
    implementation("androidx.core:core-ktx:${rootProject.ext.coreKtxVersion}")
    implementation("androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}")
    implementation("androidx.constraintlayout:constraintlayout:${rootProject.ext.constraintlayoutVersion}")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:${rootProject.ext.lifecycleRuntimeKtxVersion}")
    implementation("androidx.recyclerview:recyclerview:1.3.0-alpha02")
    implementation("androidx.fragment:fragment-ktx:${rootProject.ext.fragmentKtxVersion}")


    implementation("com.google.android.material:material:${rootProject.ext.materialVersiob}")

    implementation("androidx.room:room-runtime:${rootProject.ext.roomVersion}")
    ksp("androidx.room:room-compiler:${rootProject.ext.roomVersion}")
    implementation("androidx.room:room-ktx:${rootProject.ext.roomVersion}")

    implementation("com.squareup.moshi:moshi:${rootProject.ext.moshiVersion}")
    ksp("com.squareup.moshi:moshi-kotlin-codegen:${rootProject.ext.moshiVersion}")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.ext.coroutinesVersion}")


    if (isRelease) {
        implementation("com.github.yikwing.ykmagic:config:0.1.0")
        implementation("com.github.yikwing.ykmagic:network:0.1.0")
        implementation("com.github.yikwing.ykmagic:proxy:0.1.0")
        implementation("com.github.yikwing.ykmagic:extension:0.1.0")
        implementation("com.github.yikwing.ykmagic:permission:0.1.0")
        implementation("com.github.yikwing.ykmagic:logger:0.1.0")
    } else {
        implementation project(path: ':module_config')
        implementation project(path: ':module_network')
        implementation project(path: ':module_proxy')
        implementation project(path: ':module_extension')
        implementation project(path: ':module_permission')
        implementation project(path: ':module_logger')
    }

    implementation("io.coil-kt:coil:${rootProject.ext.coilVersion}")

    implementation("com.squareup.okio:okio:3.1.0")

    debugImplementation("com.guolindev.glance:glance:${rootProject.ext.glanceVersion}")
    debugImplementation('com.squareup.leakcanary:leakcanary-android:2.9.1')

    debugImplementation("com.github.chuckerteam.chucker:library:3.5.2")
    releaseImplementation("com.github.chuckerteam.chucker:library-no-op:3.5.2")

    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    androidTestImplementation("androidx.test.ext:junit:1.1.3")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.4.0")

}