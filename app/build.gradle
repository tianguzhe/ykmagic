import groovy.json.JsonOutput

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.google.devtools.ksp")
    id("com.github.ben-manes.versions") version "0.43.0"
}

def isRelease = false

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

//资源重定向
def listSubFile = {
    //新资源目录
    def resFolder = 'src/main/res/layouts'
    //新资源目录下的文件夹
    def files = file(resFolder).listFiles()
    def folders = []
    //遍历路径
    files.each { item -> folders.add(item.absolutePath)
    }
    //资源整合
    folders.add(file(resFolder).parentFile.absolutePath)
    return folders
}

android {
    compileSdk = rootProject.ext.compileSdk

    defaultConfig {
        applicationId "com.yikwing.ykquickdev"
        minSdk = rootProject.ext.minSdk
        targetSdk = rootProject.ext.targetSdk
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
            buildConfigField "String", "YK_CONFIG", "\"" + JsonOutput.toJson(rootProject.ext.injectEnv).replaceAll("\"", "\\\\\"") + "\""
        }
        release {
            // 启用代码压缩、优化及混淆
            minifyEnabled true
            // 启用资源压缩
            shrinkResources true
            signingConfig signingConfigs.config
            buildConfigField "String", "YK_CONFIG", "\"" + JsonOutput.toJson(rootProject.ext.injectEnv).replaceAll("\"", "\\\\\"") + "\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        ndk {
            abiFilters 'arm64-v8a'
        }
    }

    sourceSets {
        main {
            res.srcDirs = listSubFile()
        }
    }

    lint {
        checkDependencies true
    }
    namespace 'com.yikwing.ykquickdev'
}

dependencies {
    implementation("androidx.core:core-ktx:${rootProject.ext.core_ktx_version}")
    implementation("androidx.appcompat:appcompat:${rootProject.ext.appcompat_version}")
    implementation("androidx.constraintlayout:constraintlayout:${rootProject.ext.constraintlayout_version}")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:${rootProject.ext.lifecycle_runtime_ktx_version}")
    implementation("androidx.recyclerview:recyclerview:${rootProject.ext.recyclerview_version}")
    implementation("androidx.fragment:fragment-ktx:${rootProject.ext.fragment_ktx_version}")


    implementation("com.google.android.material:material:${rootProject.ext.material_version}")

    implementation("androidx.room:room-runtime:${rootProject.ext.room_version}")
    ksp("androidx.room:room-compiler:${rootProject.ext.room_version}")
    implementation("androidx.room:room-ktx:${rootProject.ext.room_version}")

    implementation("com.squareup.moshi:moshi:${rootProject.ext.moshi_version}")
    ksp("com.squareup.moshi:moshi-kotlin-codegen:${rootProject.ext.moshi_version}")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.ext.coroutines_version}")


    if (isRelease) {
        implementation("com.github.yikwing.ykmagic:config:0.1.0")
        implementation("com.github.yikwing.ykmagic:network:0.1.0")
        implementation("com.github.yikwing.ykmagic:proxy:0.1.0")
        implementation("com.github.yikwing.ykmagic:extension:0.1.0")
        implementation("com.github.yikwing.ykmagic:permission:0.1.0")
        implementation("com.github.yikwing.ykmagic:logger:0.1.0")
        implementation("com.github.yikwing.ykmagic:compress:0.1.0")
    } else {
        implementation project(path: ':module_config')
        implementation project(path: ':module_network')
        implementation project(path: ':module_proxy')
        implementation project(path: ':module_extension')
        implementation project(path: ':module_permission')
        implementation project(path: ':module_logger')
        implementation project(path: ':module_compress')
    }

    implementation("io.coil-kt:coil:${rootProject.ext.coil_version}")

    implementation("com.squareup.okio:okio:${rootProject.ext.okio_version}")

    implementation("com.facebook.spectrum:spectrum-default:1.3.0")

    debugImplementation("com.guolindev.glance:glance:${rootProject.ext.glance_version}")
    debugImplementation("com.squareup.leakcanary:leakcanary-android:${rootProject.ext.leakcanary_version}")

    debugImplementation("com.github.chuckerteam.chucker:library:3.5.2")
    releaseImplementation("com.github.chuckerteam.chucker:library-no-op:3.5.2")

    testImplementation("org.hamcrest:hamcrest:${rootProject.ext.hamcrest_version}")
    testImplementation("org.hamcrest:hamcrest-library:${rootProject.ext.hamcrest_version}")
    testImplementation("junit:junit:${rootProject.ext.junit_version}")
    testImplementation("io.mockk:mockk:1.12.8")
    androidTestImplementation("androidx.test.ext:junit:1.1.3")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.4.0")

}