import groovy.json.JsonOutput

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("kotlin-parcelize")
    id("com.google.devtools.ksp")
    id("com.github.ben-manes.versions") version "0.45.0"
}

def cfg = rootProject.ext.android
def nativeDep = rootProject.ext.nativeDep
def androidDep = rootProject.ext.androidDep
def thirdDep = rootProject.ext.thirdDep
def debugDep = rootProject.ext.debugDep
def testDep = rootProject.ext.testDep

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

//资源重定向
def listSubFile = {
    //新资源目录
    def resFolder = 'src/main/res/layouts'
    //新资源目录下的文件夹
    def files = file(resFolder).listFiles()
    def folders = []
    //遍历路径
    files.each { item -> folders.add(item.absolutePath) }
    //资源整合
    folders.add(file(resFolder).parentFile.absolutePath)
    return folders
}

android {
    compileSdk cfg.compileSdk

    defaultConfig {
        if (cfg.isApplication) {
            applicationId "com.yikwing.ykquickdev"
        }
        minSdk cfg.minSdk
        targetSdk cfg.targetSdk
        versionCode cfg.versionCode
        versionName cfg.versionName

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
            buildConfigField "String", "YK_CONFIG", "\"" + JsonOutput.toJson(rootProject.ext.injectEnv).replaceAll("\"", "\\\\\"") + "\""
        }
        release {
            // 启用代码压缩、优化及混淆
            minifyEnabled true
            // 启用资源压缩
            shrinkResources true
            signingConfig signingConfigs.config
            buildConfigField "String", "YK_CONFIG", "\"" + JsonOutput.toJson(rootProject.ext.injectEnv).replaceAll("\"", "\\\\\"") + "\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    viewBinding {
        enabled = true
    }

    defaultConfig {
        ndk {
            abiFilters 'arm64-v8a'
        }
    }

    sourceSets {
        main {
            res.srcDirs = listSubFile()
        }
    }

    lintOptions {
        checkDependencies true
    }

    namespace 'com.yikwing.ykquickdev'
}

dependencies {
    implementation("androidx.activity:activity-ktx:${androidDep.activity_ktx_version}")
    implementation("androidx.fragment:fragment-ktx:${androidDep.fragment_ktx_version}")
    implementation("androidx.core:core-ktx:${androidDep.core_ktx_version}")
    implementation("androidx.appcompat:appcompat:${androidDep.appcompat_version}")
    implementation("com.google.android.material:material:${androidDep.material_version}")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:${androidDep.lifecycle_runtime_ktx_version}")
    implementation("androidx.constraintlayout:constraintlayout:${androidDep.constraintlayout_version}")
    implementation("androidx.recyclerview:recyclerview:${androidDep.recyclerview_version}")

    implementation("androidx.room:room-runtime:${thirdDep.room_version}")
    ksp("androidx.room:room-compiler:${thirdDep.room_version}")
    implementation("androidx.room:room-ktx:${thirdDep.room_version}")

    implementation("com.squareup.moshi:moshi:${thirdDep.moshi_version}")
    ksp("com.squareup.moshi:moshi-kotlin-codegen:${thirdDep.moshi_version}")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:${thirdDep.coroutines_version}")

    if (cfg.isApplication) {
        implementation("com.github.yikwing.ykmagic:config:0.1.0")
        implementation("com.github.yikwing.ykmagic:network:0.1.0")
        implementation("com.github.yikwing.ykmagic:proxy:0.1.0")
        implementation("com.github.yikwing.ykmagic:extension:0.1.0")
        implementation("com.github.yikwing.ykmagic:permission:0.1.0")
        implementation("com.github.yikwing.ykmagic:logger:0.1.0")
    } else {
        nativeDep.each { dep -> implementation project(path: dep) }
    }

    implementation("io.coil-kt:coil:${thirdDep.coil_version}")

    implementation("com.squareup.okhttp3:okhttp:${thirdDep.okhttp_version}")
    implementation("com.squareup.retrofit2:retrofit:${thirdDep.retrofit_version}")
    implementation("com.squareup.okio:okio:${thirdDep.okio_version}")

    debugImplementation("com.guolindev.glance:glance:${debugDep.glance_version}")
    debugImplementation("com.squareup.leakcanary:leakcanary-android:${debugDep.leakcanary_version}")

    debugImplementation("com.github.chuckerteam.chucker:library:3.5.2")
    releaseImplementation("com.github.chuckerteam.chucker:library-no-op:3.5.2")

    testImplementation("org.hamcrest:hamcrest:${testDep.hamcrest_version}")
    testImplementation("org.hamcrest:hamcrest-library:${testDep.hamcrest_version}")
    testImplementation("junit:junit:${testDep.junit_version}")

    testImplementation("io.mockk:mockk:1.13.4")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
}
